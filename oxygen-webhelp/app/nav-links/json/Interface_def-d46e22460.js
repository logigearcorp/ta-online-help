define({"topics" : [{"title":"Interface mapping","shortdesc":"\n               <p class=\"shortdesc\">Interface mapping identifies elements of an interface in an application under   test</p>\n            ","id":"Interface_def_mapping_misc","href":"TA_Help\/Topics\/Interface_def_mapping.201401.html","menu": {"hasChildren":false,},"tocID":"Interface_def_mapping_misc-d46e22473","topics":[]},{"title":"Interface entities and elements","shortdesc":"\n               <p class=\"shortdesc\"><span class=\"ph\">TestArchitect</span> interfaces are implemented with         interface entities and interface elements. These project items identify the windows\n                  and         controls of an application&apos;s user interface, and assign TA names to them.\n               </p>\n            ","id":"Interface_entities_and_elements","href":"TA_Help\/Topics\/Interface_entities_and_elements.html","menu": {"hasChildren":false,},"tocID":"Interface_entities_and_elements-d46e22484","topics":[]},{"title":"Creating an interface","shortdesc":"\n               <p class=\"shortdesc\">An interface in <span class=\"ph\">TestArchitect</span> is essentially a container     for a set of interface entities and elements, which perform the actual mappings. \n               </p>\n            ","id":"Interface_def_create_interface","href":"TA_Help\/Topics\/Interface_def_create_interface.html","menu": {"hasChildren":false,},"tocID":"Interface_def_create_interface-d46e22497","topics":[]},{"title":"Setting a default interface","shortdesc":"\n               <p class=\"shortdesc\">The <span class=\"keyword\">default interface</span> in a project is the one that is in effect during a test if no     other interface has been specified for the test. (Typically,\n                  however, a test initializes itself     with the <span class=\"keyword apiname\">use interface</span> built-in action to     specify the interface to be used).\n               </p>\n            ","id":"Interface_def_set_default_interface","href":"TA_Help\/Topics\/Interface_def_set_default_interface.html","menu": {"hasChildren":false,},"tocID":"Interface_def_set_default_interface-d46e22511","topics":[]},{"title":"Creating interface entities","shortdesc":"\n               <p class=\"shortdesc\">How to create an interface entity, which is used to represent such AUT elements as     desktop windows, browser windows, and\n                  dialog boxes. \n               </p>\n            ","id":"Interface_def_adding","href":"TA_Help\/Topics\/Interface_def_Adding.html","menu": {"hasChildren":false,},"tocID":"Interface_def_adding-d46e22528","topics":[]},{"title":"Interface capturing commands","shortdesc":"\n               <p class=\"shortdesc\">In addition to the <span class=\"keyword wintitle\">Interface Viewer</span>, <span class=\"ph\">TestArchitect</span> offers   some handy tools for working with interfaces, or examining the elements of an AUT&apos;s user   interface.\n               </p>\n            ","id":"Interface_def_client_interface_tools","href":"TA_Help\/Topics\/Interface_def_client_interface_tool.html","menu": {"hasChildren":false,},"tocID":"Interface_def_client_interface_tools-d46e22539","next":"Interface_def_client_interface_tools-d46e22539",},{"title":"The Interface Viewer","shortdesc":"\n               <p class=\"shortdesc\">The Interface Viewer is a powerful support tool that allows you to capture and save all   or parts of an interface definition,\n                  and to explore the elements of an AUT&apos;s   interface.\n               </p>\n            ","id":"Interface_viewer","href":"TA_Help\/Topics\/Interface_def_Viewer.html","menu": {"hasChildren":false,},"tocID":"Interface_viewer-d46e22661","next":"Interface_viewer-d46e22661",},{"title":"Addressing windows, controls of MDI apps","shortdesc":"\n               <p class=\"shortdesc\">This topic explains how <span class=\"ph\">TestArchitect</span> significantly   enhances the UI matching process performance for Multiple Document Interface (MDI) applications   during\n                  test automation\n               </p>\n            ","id":"concept_y3w_mqq_qx","href":"TA_Help\/Topics\/ug_MDI.html","menu": {"hasChildren":false,},"tocID":"concept_y3w_mqq_qx-d46e23068","next":"concept_y3w_mqq_qx-d46e23068",},{"title":"Exporting an interface entity","shortdesc":"\n               <p class=\"shortdesc\">Interface entities can be exported to archive files (<span class=\"ph filepath\">.ZIP</span> format),   which can be used as a backup or for re-importing. \n               </p>\n            ","id":"Test_result_export_import","href":"TA_Help\/Topics\/Interface_entity_exporting.html","menu": {"hasChildren":false,},"tocID":"Test_result_export_import-d46e23109","topics":[]},{"title":"Importing an interface entity","shortdesc":"\n               <p class=\"shortdesc\">You can import an interface entity into your project from one that has been saved to a    <span class=\"ph filepath\">.ZIP</span> archive file. \n               </p>\n            ","id":"Projects_and_tests_import_interface_entity","href":"TA_Help\/Topics\/Interface_entity_importing.html","menu": {"hasChildren":false,},"tocID":"Projects_and_tests_import_interface_entity-d46e23123","topics":[]},{"title":"Class mapping","shortdesc":"\n               <p class=\"shortdesc\">To address the complexity introduced by the variety of native control    classes, <span class=\"ph\">TestArchitect</span> introduces the concept of <dfn class=\"term\">TA     classes</dfn>. TA classes represent a <span class=\"q\">“common core”</span> of control classes that <span class=\"ph\">TestArchitect</span>&apos;s built-in actions and methods are designed to    interface with. Class mapping is the process of relating the various control\n                  classes of each    software platform to their corresponding TA classes.\n               </p>\n            ","id":"concept_ukz_lvz_dl","href":"TA_Help\/Topics\/Class_mapping.html","menu": {"hasChildren":false,},"tocID":"concept_ukz_lvz_dl-d46e23138","next":"concept_ukz_lvz_dl-d46e23138",},{"title":"Control properties","shortdesc":"\n               <p class=\"shortdesc\">For each known class of control, <span class=\"ph\">TestArchitect</span> uses     internal mapping files to map its native properties to a set of TA properties. \n               </p>\n            ","id":"Interface_def.control_properties","href":"TA_Help\/Topics\/Interface_def_control_properties.html","menu": {"hasChildren":false,},"tocID":"Interface_def.control_properties-d46e23315","next":"Interface_def.control_properties-d46e23315",},{"title":"Dynamic identifiers","shortdesc":"\n               <p class=\"shortdesc\"> Dynamic identifiers allow the identification of controls and windows to\n                  be made under program control, rather than with interface definitions.\n                  \n               </p>\n            ","id":"the_test_language_dynamic_identifiers","href":"TA_Help\/Topics\/The_test_language_dynamic_identifiers.html","menu": {"hasChildren":false,},"tocID":"the_test_language_dynamic_identifiers-d46e23628","topics":[]},{"title":"Container classes","shortdesc":"\n               <p class=\"shortdesc\">Container classes are classes of UI controls that can contain other controls. Because   the number of child controls that\n                  a container holds is potentially unlimited, such container   classes present possible performance hits during test runs. To\n                  avoid such issues, <span class=\"ph\">TestArchitect</span> offers the option of bypassing the recognition of   container child controls.\n               </p>\n            ","id":"Interface_container_class","href":"TA_Help\/Topics\/Interface_def_container_class.html","menu": {"hasChildren":false,},"tocID":"Interface_container_class-d46e23641","next":"Interface_container_class-d46e23641",}]});